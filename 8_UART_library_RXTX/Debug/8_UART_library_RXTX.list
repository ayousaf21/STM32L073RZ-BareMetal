
8_UART_library_RXTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003a8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006ed  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026a  00000000  00000000  00010abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00010d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ca3f  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c7e  00000000  00000000  0001d85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00043a95  00000000  00000000  0001e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00061f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  00061fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000388 	.word	0x08000388

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000388 	.word	0x08000388

08000108 <main>:
	for (int i = 0; i < (delay * 100); i++) {}
}


int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	// Enable GPIO clock for Port A and C
	RCC->IOPENR |= GPIOAEN;
 800010c:	4b25      	ldr	r3, [pc, #148]	; (80001a4 <main+0x9c>)
 800010e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000110:	4b24      	ldr	r3, [pc, #144]	; (80001a4 <main+0x9c>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= GPIOCEN;
 8000118:	4b22      	ldr	r3, [pc, #136]	; (80001a4 <main+0x9c>)
 800011a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800011c:	4b21      	ldr	r3, [pc, #132]	; (80001a4 <main+0x9c>)
 800011e:	2104      	movs	r1, #4
 8000120:	430a      	orrs	r2, r1
 8000122:	62da      	str	r2, [r3, #44]	; 0x2c
	// GPIO PA5 output mode
	GPIOA->MODER |= (1U << 10);
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	00c9      	lsls	r1, r1, #3
 8000132:	430a      	orrs	r2, r1
 8000134:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000136:	23a0      	movs	r3, #160	; 0xa0
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	681a      	ldr	r2, [r3, #0]
 800013c:	23a0      	movs	r3, #160	; 0xa0
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	4919      	ldr	r1, [pc, #100]	; (80001a8 <main+0xa0>)
 8000142:	400a      	ands	r2, r1
 8000144:	601a      	str	r2, [r3, #0]
	// GPIO PC13 input mode
	GPIOC->MODER &= ~(1U << 26);
 8000146:	4b19      	ldr	r3, [pc, #100]	; (80001ac <main+0xa4>)
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	4b18      	ldr	r3, [pc, #96]	; (80001ac <main+0xa4>)
 800014c:	4918      	ldr	r1, [pc, #96]	; (80001b0 <main+0xa8>)
 800014e:	400a      	ands	r2, r1
 8000150:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1U << 27);
 8000152:	4b16      	ldr	r3, [pc, #88]	; (80001ac <main+0xa4>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <main+0xa4>)
 8000158:	4916      	ldr	r1, [pc, #88]	; (80001b4 <main+0xac>)
 800015a:	400a      	ands	r2, r1
 800015c:	601a      	str	r2, [r3, #0]

	UART4_TXRX_init();
 800015e:	f000 f82d 	bl	80001bc <UART4_TXRX_init>

    /* Loop forever */
	while(1)
	{
		key = UART4_read();
 8000162:	f000 f8b3 	bl	80002cc <UART4_read>
 8000166:	0003      	movs	r3, r0
 8000168:	001a      	movs	r2, r3
 800016a:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <main+0xb0>)
 800016c:	701a      	strb	r2, [r3, #0]

		if (key == 'Y')
 800016e:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <main+0xb0>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	2b59      	cmp	r3, #89	; 0x59
 8000174:	d108      	bne.n	8000188 <main+0x80>
		{
			GPIOA->BSRR |= PIN5_SET;
 8000176:	23a0      	movs	r3, #160	; 0xa0
 8000178:	05db      	lsls	r3, r3, #23
 800017a:	699a      	ldr	r2, [r3, #24]
 800017c:	23a0      	movs	r3, #160	; 0xa0
 800017e:	05db      	lsls	r3, r3, #23
 8000180:	2120      	movs	r1, #32
 8000182:	430a      	orrs	r2, r1
 8000184:	619a      	str	r2, [r3, #24]
 8000186:	e7ec      	b.n	8000162 <main+0x5a>
		}
		else if (key == 'N')
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <main+0xb0>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b4e      	cmp	r3, #78	; 0x4e
 800018e:	d1e8      	bne.n	8000162 <main+0x5a>
		{
			GPIOA->BSRR |= PIN5_RESET;
 8000190:	23a0      	movs	r3, #160	; 0xa0
 8000192:	05db      	lsls	r3, r3, #23
 8000194:	699a      	ldr	r2, [r3, #24]
 8000196:	23a0      	movs	r3, #160	; 0xa0
 8000198:	05db      	lsls	r3, r3, #23
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	0389      	lsls	r1, r1, #14
 800019e:	430a      	orrs	r2, r1
 80001a0:	619a      	str	r2, [r3, #24]
		key = UART4_read();
 80001a2:	e7de      	b.n	8000162 <main+0x5a>
 80001a4:	40021000 	.word	0x40021000
 80001a8:	fffff7ff 	.word	0xfffff7ff
 80001ac:	50000800 	.word	0x50000800
 80001b0:	fbffffff 	.word	0xfbffffff
 80001b4:	f7ffffff 	.word	0xf7ffffff
 80001b8:	2000001c 	.word	0x2000001c

080001bc <UART4_TXRX_init>:
 *      Author: Muhammad Ali
 */
#include "uart.h"

void UART4_TXRX_init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
	// Enable Clock on GPIO Port C
	RCC->IOPENR |= GPIOCEN;
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <UART4_TXRX_init+0xec>)
 80001c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001c4:	4b38      	ldr	r3, [pc, #224]	; (80002a8 <UART4_TXRX_init+0xec>)
 80001c6:	2104      	movs	r1, #4
 80001c8:	430a      	orrs	r2, r1
 80001ca:	62da      	str	r2, [r3, #44]	; 0x2c
	// GPIO C10 Alternate function mode
	GPIOC->MODER &= ~(1U << 20);
 80001cc:	4b37      	ldr	r3, [pc, #220]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b36      	ldr	r3, [pc, #216]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001d2:	4937      	ldr	r1, [pc, #220]	; (80002b0 <UART4_TXRX_init+0xf4>)
 80001d4:	400a      	ands	r2, r1
 80001d6:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1U << 21);
 80001d8:	4b34      	ldr	r3, [pc, #208]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b33      	ldr	r3, [pc, #204]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	0389      	lsls	r1, r1, #14
 80001e2:	430a      	orrs	r2, r1
 80001e4:	601a      	str	r2, [r3, #0]
	// GPIO C10 alternate function UART4_TX (AF6)
	GPIOC->AFR[1] &= ~(1U << 8);
 80001e6:	4b31      	ldr	r3, [pc, #196]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001ea:	4b30      	ldr	r3, [pc, #192]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001ec:	4931      	ldr	r1, [pc, #196]	; (80002b4 <UART4_TXRX_init+0xf8>)
 80001ee:	400a      	ands	r2, r1
 80001f0:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 9);
 80001f2:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001f6:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <UART4_TXRX_init+0xf0>)
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	0089      	lsls	r1, r1, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 10);
 8000200:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000204:	4b29      	ldr	r3, [pc, #164]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	00c9      	lsls	r1, r1, #3
 800020a:	430a      	orrs	r2, r1
 800020c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(1U << 11);
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000212:	4b26      	ldr	r3, [pc, #152]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000214:	4928      	ldr	r1, [pc, #160]	; (80002b8 <UART4_TXRX_init+0xfc>)
 8000216:	400a      	ands	r2, r1
 8000218:	625a      	str	r2, [r3, #36]	; 0x24

	// GPIO C11 Alternate function mode
	GPIOC->MODER &= ~(1U << 22);
 800021a:	4b24      	ldr	r3, [pc, #144]	; (80002ac <UART4_TXRX_init+0xf0>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b23      	ldr	r3, [pc, #140]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000220:	4926      	ldr	r1, [pc, #152]	; (80002bc <UART4_TXRX_init+0x100>)
 8000222:	400a      	ands	r2, r1
 8000224:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1U << 23);
 8000226:	4b21      	ldr	r3, [pc, #132]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b20      	ldr	r3, [pc, #128]	; (80002ac <UART4_TXRX_init+0xf0>)
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	0409      	lsls	r1, r1, #16
 8000230:	430a      	orrs	r2, r1
 8000232:	601a      	str	r2, [r3, #0]
	// GPIO C11 alternate function UART4_RX (AF6)
	GPIOC->AFR[1] &= ~(1U << 12);
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <UART4_TXRX_init+0xf0>)
 800023a:	4921      	ldr	r1, [pc, #132]	; (80002c0 <UART4_TXRX_init+0x104>)
 800023c:	400a      	ands	r2, r1
 800023e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 13);
 8000240:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000246:	2180      	movs	r1, #128	; 0x80
 8000248:	0189      	lsls	r1, r1, #6
 800024a:	430a      	orrs	r2, r1
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 14);
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000252:	4b16      	ldr	r3, [pc, #88]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	01c9      	lsls	r1, r1, #7
 8000258:	430a      	orrs	r2, r1
 800025a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(1U << 15);
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <UART4_TXRX_init+0xf0>)
 800025e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <UART4_TXRX_init+0xf0>)
 8000262:	4918      	ldr	r1, [pc, #96]	; (80002c4 <UART4_TXRX_init+0x108>)
 8000264:	400a      	ands	r2, r1
 8000266:	625a      	str	r2, [r3, #36]	; 0x24

	// Enable Clock on UART4
	RCC->APB1ENR |= USART4EN;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <UART4_TXRX_init+0xec>)
 800026a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <UART4_TXRX_init+0xec>)
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	0309      	lsls	r1, r1, #12
 8000272:	430a      	orrs	r2, r1
 8000274:	639a      	str	r2, [r3, #56]	; 0x38
	// Config BaudRate
	USART4->BRR = APB1_CLK / BAUDRATE;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <UART4_TXRX_init+0x10c>)
 8000278:	22da      	movs	r2, #218	; 0xda
 800027a:	60da      	str	r2, [r3, #12]
	// Configure transmission mode RXTX
	USART4->CR1 |= (1U << 2);		// RX Enable
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <UART4_TXRX_init+0x10c>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <UART4_TXRX_init+0x10c>)
 8000282:	2104      	movs	r1, #4
 8000284:	430a      	orrs	r2, r1
 8000286:	601a      	str	r2, [r3, #0]
	USART4->CR1 |= (1U << 3);		// TX Enable
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <UART4_TXRX_init+0x10c>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <UART4_TXRX_init+0x10c>)
 800028e:	2108      	movs	r1, #8
 8000290:	430a      	orrs	r2, r1
 8000292:	601a      	str	r2, [r3, #0]
	// Enable UART4 module
	USART4->CR1 |= (1U << 0);
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <UART4_TXRX_init+0x10c>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <UART4_TXRX_init+0x10c>)
 800029a:	2101      	movs	r1, #1
 800029c:	430a      	orrs	r2, r1
 800029e:	601a      	str	r2, [r3, #0]

}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	40021000 	.word	0x40021000
 80002ac:	50000800 	.word	0x50000800
 80002b0:	ffefffff 	.word	0xffefffff
 80002b4:	fffffeff 	.word	0xfffffeff
 80002b8:	fffff7ff 	.word	0xfffff7ff
 80002bc:	ffbfffff 	.word	0xffbfffff
 80002c0:	ffffefff 	.word	0xffffefff
 80002c4:	ffff7fff 	.word	0xffff7fff
 80002c8:	40004c00 	.word	0x40004c00

080002cc <UART4_read>:
	// Write to transmit data register
	USART4->TDR = (data);
}

char UART4_read(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// Check if receiver data register is not empty
	while (!(USART4->ISR & (1U << 5)));
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <UART4_read+0x1c>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	2220      	movs	r2, #32
 80002d8:	4013      	ands	r3, r2
 80002da:	d0fa      	beq.n	80002d2 <UART4_read+0x6>

	return USART4->RDR;
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <UART4_read+0x1c>)
 80002de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e0:	b2db      	uxtb	r3, r3

}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40004c00 	.word	0x40004c00

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	e000      	b.n	80002f4 <Reset_Handler+0x8>
 80002f2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff fef3 	bl	8000108 <main>

08000322 <LoopForever>:

LoopForever:
  b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	20000020 	.word	0x20000020

0800033c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_COMP_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2600      	movs	r6, #0
 8000344:	4d0c      	ldr	r5, [pc, #48]	; (8000378 <__libc_init_array+0x38>)
 8000346:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	2600      	movs	r6, #0
 8000352:	f000 f819 	bl	8000388 <_init>
 8000356:	4d0a      	ldr	r5, [pc, #40]	; (8000380 <__libc_init_array+0x40>)
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <__libc_init_array+0x44>)
 800035a:	1b64      	subs	r4, r4, r5
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	00b3      	lsls	r3, r6, #2
 8000366:	58eb      	ldr	r3, [r5, r3]
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	00b3      	lsls	r3, r6, #2
 8000370:	58eb      	ldr	r3, [r5, r3]
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
