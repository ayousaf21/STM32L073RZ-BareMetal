
5_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  4 .ARM          00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800033c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800033c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003de  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000013e  00000000  00000000  00010742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  000108e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000badf  00000000  00000000  00010928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000598  00000000  00000000  0001c407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fa51  00000000  00000000  0001c99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005c3f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  0005c440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800031c 	.word	0x0800031c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800031c 	.word	0x0800031c

08000108 <UART4_TX_init>:
	for (int i = 0; i < (delay * 100); i++) {}
}


void UART4_TX_init(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	// Enable Clock on GPIO Port C
	RCC->IOPENR |= GPIOCEN;
 800010c:	4b22      	ldr	r3, [pc, #136]	; (8000198 <UART4_TX_init+0x90>)
 800010e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000110:	4b21      	ldr	r3, [pc, #132]	; (8000198 <UART4_TX_init+0x90>)
 8000112:	2104      	movs	r1, #4
 8000114:	430a      	orrs	r2, r1
 8000116:	62da      	str	r2, [r3, #44]	; 0x2c
	// GPIO A10 Alternate function mode
	GPIOC->MODER &= ~(1U << 20);
 8000118:	4b20      	ldr	r3, [pc, #128]	; (800019c <UART4_TX_init+0x94>)
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	4b1f      	ldr	r3, [pc, #124]	; (800019c <UART4_TX_init+0x94>)
 800011e:	4920      	ldr	r1, [pc, #128]	; (80001a0 <UART4_TX_init+0x98>)
 8000120:	400a      	ands	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1U << 21);
 8000124:	4b1d      	ldr	r3, [pc, #116]	; (800019c <UART4_TX_init+0x94>)
 8000126:	681a      	ldr	r2, [r3, #0]
 8000128:	4b1c      	ldr	r3, [pc, #112]	; (800019c <UART4_TX_init+0x94>)
 800012a:	2180      	movs	r1, #128	; 0x80
 800012c:	0389      	lsls	r1, r1, #14
 800012e:	430a      	orrs	r2, r1
 8000130:	601a      	str	r2, [r3, #0]
	// GPIO A10 alternate function UART4_TX (AF6)
	GPIOC->AFR[1] &= ~(1U << 8);
 8000132:	4b1a      	ldr	r3, [pc, #104]	; (800019c <UART4_TX_init+0x94>)
 8000134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000136:	4b19      	ldr	r3, [pc, #100]	; (800019c <UART4_TX_init+0x94>)
 8000138:	491a      	ldr	r1, [pc, #104]	; (80001a4 <UART4_TX_init+0x9c>)
 800013a:	400a      	ands	r2, r1
 800013c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 9);
 800013e:	4b17      	ldr	r3, [pc, #92]	; (800019c <UART4_TX_init+0x94>)
 8000140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000142:	4b16      	ldr	r3, [pc, #88]	; (800019c <UART4_TX_init+0x94>)
 8000144:	2180      	movs	r1, #128	; 0x80
 8000146:	0089      	lsls	r1, r1, #2
 8000148:	430a      	orrs	r2, r1
 800014a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] |= (1U << 10);
 800014c:	4b13      	ldr	r3, [pc, #76]	; (800019c <UART4_TX_init+0x94>)
 800014e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000150:	4b12      	ldr	r3, [pc, #72]	; (800019c <UART4_TX_init+0x94>)
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	00c9      	lsls	r1, r1, #3
 8000156:	430a      	orrs	r2, r1
 8000158:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->AFR[1] &= ~(1U << 11);
 800015a:	4b10      	ldr	r3, [pc, #64]	; (800019c <UART4_TX_init+0x94>)
 800015c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800015e:	4b0f      	ldr	r3, [pc, #60]	; (800019c <UART4_TX_init+0x94>)
 8000160:	4911      	ldr	r1, [pc, #68]	; (80001a8 <UART4_TX_init+0xa0>)
 8000162:	400a      	ands	r2, r1
 8000164:	625a      	str	r2, [r3, #36]	; 0x24

	// Enable Clock on UART4
	RCC->APB1ENR |= USART4EN;
 8000166:	4b0c      	ldr	r3, [pc, #48]	; (8000198 <UART4_TX_init+0x90>)
 8000168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800016a:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <UART4_TX_init+0x90>)
 800016c:	2180      	movs	r1, #128	; 0x80
 800016e:	0309      	lsls	r1, r1, #12
 8000170:	430a      	orrs	r2, r1
 8000172:	639a      	str	r2, [r3, #56]	; 0x38
	// Config BaudRate
	USART4->BRR = APB1_CLK / BAUDRATE;
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <UART4_TX_init+0xa4>)
 8000176:	22da      	movs	r2, #218	; 0xda
 8000178:	60da      	str	r2, [r3, #12]
	// Configure transmission mode
	USART4->CR1 |= (1U << 3);
 800017a:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <UART4_TX_init+0xa4>)
 800017c:	681a      	ldr	r2, [r3, #0]
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <UART4_TX_init+0xa4>)
 8000180:	2108      	movs	r1, #8
 8000182:	430a      	orrs	r2, r1
 8000184:	601a      	str	r2, [r3, #0]
	// Enable UART4 module
	USART4->CR1 |= (1U << 0);
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <UART4_TX_init+0xa4>)
 8000188:	681a      	ldr	r2, [r3, #0]
 800018a:	4b08      	ldr	r3, [pc, #32]	; (80001ac <UART4_TX_init+0xa4>)
 800018c:	2101      	movs	r1, #1
 800018e:	430a      	orrs	r2, r1
 8000190:	601a      	str	r2, [r3, #0]

}
 8000192:	46c0      	nop			; (mov r8, r8)
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40021000 	.word	0x40021000
 800019c:	50000800 	.word	0x50000800
 80001a0:	ffefffff 	.word	0xffefffff
 80001a4:	fffffeff 	.word	0xfffffeff
 80001a8:	fffff7ff 	.word	0xfffff7ff
 80001ac:	40004c00 	.word	0x40004c00

080001b0 <UART4_write>:

void UART4_write(int data)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	// Check if transmit data register is empty
	while (!(USART4->ISR & (1U << 7)));
 80001b8:	46c0      	nop			; (mov r8, r8)
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <UART4_write+0x24>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	2280      	movs	r2, #128	; 0x80
 80001c0:	4013      	ands	r3, r2
 80001c2:	d0fa      	beq.n	80001ba <UART4_write+0xa>
	// Write to transmit data register
	USART4->TDR = (data);
 80001c4:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <UART4_write+0x24>)
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	46bd      	mov	sp, r7
 80001ce:	b002      	add	sp, #8
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	46c0      	nop			; (mov r8, r8)
 80001d4:	40004c00 	.word	0x40004c00

080001d8 <main>:


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Enable GPIO clock for Port A and C
	RCC->IOPENR |= GPIOAEN;
 80001dc:	4b23      	ldr	r3, [pc, #140]	; (800026c <main+0x94>)
 80001de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001e0:	4b22      	ldr	r3, [pc, #136]	; (800026c <main+0x94>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	430a      	orrs	r2, r1
 80001e6:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= GPIOCEN;
 80001e8:	4b20      	ldr	r3, [pc, #128]	; (800026c <main+0x94>)
 80001ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001ec:	4b1f      	ldr	r3, [pc, #124]	; (800026c <main+0x94>)
 80001ee:	2104      	movs	r1, #4
 80001f0:	430a      	orrs	r2, r1
 80001f2:	62da      	str	r2, [r3, #44]	; 0x2c
	// GPIO PA5 output mode
	GPIOA->MODER |= (1U << 10);
 80001f4:	23a0      	movs	r3, #160	; 0xa0
 80001f6:	05db      	lsls	r3, r3, #23
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	23a0      	movs	r3, #160	; 0xa0
 80001fc:	05db      	lsls	r3, r3, #23
 80001fe:	2180      	movs	r1, #128	; 0x80
 8000200:	00c9      	lsls	r1, r1, #3
 8000202:	430a      	orrs	r2, r1
 8000204:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000206:	23a0      	movs	r3, #160	; 0xa0
 8000208:	05db      	lsls	r3, r3, #23
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	23a0      	movs	r3, #160	; 0xa0
 800020e:	05db      	lsls	r3, r3, #23
 8000210:	4917      	ldr	r1, [pc, #92]	; (8000270 <main+0x98>)
 8000212:	400a      	ands	r2, r1
 8000214:	601a      	str	r2, [r3, #0]
	// GPIO PC13 input mode
	GPIOC->MODER &= ~(1U << 26);
 8000216:	4b17      	ldr	r3, [pc, #92]	; (8000274 <main+0x9c>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b16      	ldr	r3, [pc, #88]	; (8000274 <main+0x9c>)
 800021c:	4916      	ldr	r1, [pc, #88]	; (8000278 <main+0xa0>)
 800021e:	400a      	ands	r2, r1
 8000220:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1U << 27);
 8000222:	4b14      	ldr	r3, [pc, #80]	; (8000274 <main+0x9c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <main+0x9c>)
 8000228:	4914      	ldr	r1, [pc, #80]	; (800027c <main+0xa4>)
 800022a:	400a      	ands	r2, r1
 800022c:	601a      	str	r2, [r3, #0]

	UART4_TX_init();
 800022e:	f7ff ff6b 	bl	8000108 <UART4_TX_init>

    /* Loop forever */
	while(1)
	{
		// User BTN is active low
		if (GPIOC->IDR & PIN13_READ)
 8000232:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0x9c>)
 8000234:	691a      	ldr	r2, [r3, #16]
 8000236:	2380      	movs	r3, #128	; 0x80
 8000238:	019b      	lsls	r3, r3, #6
 800023a:	4013      	ands	r3, r2
 800023c:	d009      	beq.n	8000252 <main+0x7a>
		{
		GPIOA->BSRR |= PIN5_RESET;	// LED OFF
 800023e:	23a0      	movs	r3, #160	; 0xa0
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	699a      	ldr	r2, [r3, #24]
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	0389      	lsls	r1, r1, #14
 800024c:	430a      	orrs	r2, r1
 800024e:	619a      	str	r2, [r3, #24]
 8000250:	e7ef      	b.n	8000232 <main+0x5a>
		}
		else {
		GPIOA->BSRR |= PIN5_SET;	// BTN pressed, LED ON
 8000252:	23a0      	movs	r3, #160	; 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	699a      	ldr	r2, [r3, #24]
 8000258:	23a0      	movs	r3, #160	; 0xa0
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2120      	movs	r1, #32
 800025e:	430a      	orrs	r2, r1
 8000260:	619a      	str	r2, [r3, #24]
		UART4_write('G');
 8000262:	2047      	movs	r0, #71	; 0x47
 8000264:	f7ff ffa4 	bl	80001b0 <UART4_write>
		if (GPIOC->IDR & PIN13_READ)
 8000268:	e7e3      	b.n	8000232 <main+0x5a>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	40021000 	.word	0x40021000
 8000270:	fffff7ff 	.word	0xfffff7ff
 8000274:	50000800 	.word	0x50000800
 8000278:	fbffffff 	.word	0xfbffffff
 800027c:	f7ffffff 	.word	0xf7ffffff

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000284:	e000      	b.n	8000288 <Reset_Handler+0x8>
 8000286:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f811 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff91 	bl	80001d8 <main>

080002b6 <LoopForever>:

LoopForever:
  b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	0800033c 	.word	0x0800033c
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC_COMP_IRQHandler>
	...

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	2600      	movs	r6, #0
 80002d8:	4d0c      	ldr	r5, [pc, #48]	; (800030c <__libc_init_array+0x38>)
 80002da:	4c0d      	ldr	r4, [pc, #52]	; (8000310 <__libc_init_array+0x3c>)
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	42a6      	cmp	r6, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	2600      	movs	r6, #0
 80002e6:	f000 f819 	bl	800031c <_init>
 80002ea:	4d0a      	ldr	r5, [pc, #40]	; (8000314 <__libc_init_array+0x40>)
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <__libc_init_array+0x44>)
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	42a6      	cmp	r6, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	00b3      	lsls	r3, r6, #2
 80002fa:	58eb      	ldr	r3, [r5, r3]
 80002fc:	4798      	blx	r3
 80002fe:	3601      	adds	r6, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	00b3      	lsls	r3, r6, #2
 8000304:	58eb      	ldr	r3, [r5, r3]
 8000306:	4798      	blx	r3
 8000308:	3601      	adds	r6, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000334 	.word	0x08000334
 8000310:	08000334 	.word	0x08000334
 8000314:	08000334 	.word	0x08000334
 8000318:	08000338 	.word	0x08000338

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
